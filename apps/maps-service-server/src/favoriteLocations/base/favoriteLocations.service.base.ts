/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FavoriteLocations as PrismaFavoriteLocations,
  Location as PrismaLocation,
  User as PrismaUser,
} from "@prisma/client";

export class FavoriteLocationsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FavoriteLocationsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.favoriteLocations.count(args);
  }

  async favoriteLocationsItems<T extends Prisma.FavoriteLocationsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteLocationsFindManyArgs>
  ): Promise<PrismaFavoriteLocations[]> {
    return this.prisma.favoriteLocations.findMany<Prisma.FavoriteLocationsFindManyArgs>(
      args
    );
  }
  async favoriteLocations<T extends Prisma.FavoriteLocationsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteLocationsFindUniqueArgs>
  ): Promise<PrismaFavoriteLocations | null> {
    return this.prisma.favoriteLocations.findUnique(args);
  }
  async createFavoriteLocations<T extends Prisma.FavoriteLocationsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteLocationsCreateArgs>
  ): Promise<PrismaFavoriteLocations> {
    return this.prisma.favoriteLocations.create<T>(args);
  }
  async updateFavoriteLocations<T extends Prisma.FavoriteLocationsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteLocationsUpdateArgs>
  ): Promise<PrismaFavoriteLocations> {
    return this.prisma.favoriteLocations.update<T>(args);
  }
  async deleteFavoriteLocations<T extends Prisma.FavoriteLocationsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteLocationsDeleteArgs>
  ): Promise<PrismaFavoriteLocations> {
    return this.prisma.favoriteLocations.delete(args);
  }

  async getLocation(parentId: string): Promise<PrismaLocation | null> {
    return this.prisma.favoriteLocations
      .findUnique({
        where: { id: parentId },
      })
      .location();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.favoriteLocations
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
