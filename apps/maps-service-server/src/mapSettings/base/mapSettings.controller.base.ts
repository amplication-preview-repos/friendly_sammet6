/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MapSettingsService } from "../mapSettings.service";
import { MapSettingsCreateInput } from "./MapSettingsCreateInput";
import { MapSettings } from "./MapSettings";
import { MapSettingsFindManyArgs } from "./MapSettingsFindManyArgs";
import { MapSettingsWhereUniqueInput } from "./MapSettingsWhereUniqueInput";
import { MapSettingsUpdateInput } from "./MapSettingsUpdateInput";

export class MapSettingsControllerBase {
  constructor(protected readonly service: MapSettingsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MapSettings })
  async createMapSettings(
    @common.Body() data: MapSettingsCreateInput
  ): Promise<MapSettings> {
    return await this.service.createMapSettings({
      data: data,
      select: {
        createdAt: true,
        defaultLocation: true,
        id: true,
        mapType: true,
        updatedAt: true,
        zoomLevel: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MapSettings] })
  @ApiNestedQuery(MapSettingsFindManyArgs)
  async mapSettingsItems(
    @common.Req() request: Request
  ): Promise<MapSettings[]> {
    const args = plainToClass(MapSettingsFindManyArgs, request.query);
    return this.service.mapSettingsItems({
      ...args,
      select: {
        createdAt: true,
        defaultLocation: true,
        id: true,
        mapType: true,
        updatedAt: true,
        zoomLevel: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MapSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mapSettings(
    @common.Param() params: MapSettingsWhereUniqueInput
  ): Promise<MapSettings | null> {
    const result = await this.service.mapSettings({
      where: params,
      select: {
        createdAt: true,
        defaultLocation: true,
        id: true,
        mapType: true,
        updatedAt: true,
        zoomLevel: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MapSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMapSettings(
    @common.Param() params: MapSettingsWhereUniqueInput,
    @common.Body() data: MapSettingsUpdateInput
  ): Promise<MapSettings | null> {
    try {
      return await this.service.updateMapSettings({
        where: params,
        data: data,
        select: {
          createdAt: true,
          defaultLocation: true,
          id: true,
          mapType: true,
          updatedAt: true,
          zoomLevel: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MapSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMapSettings(
    @common.Param() params: MapSettingsWhereUniqueInput
  ): Promise<MapSettings | null> {
    try {
      return await this.service.deleteMapSettings({
        where: params,
        select: {
          createdAt: true,
          defaultLocation: true,
          id: true,
          mapType: true,
          updatedAt: true,
          zoomLevel: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
