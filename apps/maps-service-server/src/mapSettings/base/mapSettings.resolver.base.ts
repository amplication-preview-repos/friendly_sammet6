/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MapSettings } from "./MapSettings";
import { MapSettingsCountArgs } from "./MapSettingsCountArgs";
import { MapSettingsFindManyArgs } from "./MapSettingsFindManyArgs";
import { MapSettingsFindUniqueArgs } from "./MapSettingsFindUniqueArgs";
import { CreateMapSettingsArgs } from "./CreateMapSettingsArgs";
import { UpdateMapSettingsArgs } from "./UpdateMapSettingsArgs";
import { DeleteMapSettingsArgs } from "./DeleteMapSettingsArgs";
import { MapSettingsService } from "../mapSettings.service";
@graphql.Resolver(() => MapSettings)
export class MapSettingsResolverBase {
  constructor(protected readonly service: MapSettingsService) {}

  async _mapSettingsItemsMeta(
    @graphql.Args() args: MapSettingsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MapSettings])
  async mapSettingsItems(
    @graphql.Args() args: MapSettingsFindManyArgs
  ): Promise<MapSettings[]> {
    return this.service.mapSettingsItems(args);
  }

  @graphql.Query(() => MapSettings, { nullable: true })
  async mapSettings(
    @graphql.Args() args: MapSettingsFindUniqueArgs
  ): Promise<MapSettings | null> {
    const result = await this.service.mapSettings(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MapSettings)
  async createMapSettings(
    @graphql.Args() args: CreateMapSettingsArgs
  ): Promise<MapSettings> {
    return await this.service.createMapSettings({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MapSettings)
  async updateMapSettings(
    @graphql.Args() args: UpdateMapSettingsArgs
  ): Promise<MapSettings | null> {
    try {
      return await this.service.updateMapSettings({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MapSettings)
  async deleteMapSettings(
    @graphql.Args() args: DeleteMapSettingsArgs
  ): Promise<MapSettings | null> {
    try {
      return await this.service.deleteMapSettings(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
